#include <pebble.h>

static Window *s_main_window;
static TextLayer *s_time_layer, *s_date_layer, *s_potato_layer, *s_textfile_layer, *s_batterytext_layer, *s_bluetoothtext_layer, *s_batterypercent_layer, *s_schedule_layer1, *s_schedule_layer2;
static BitmapLayer *s_background_layer, *s_bt_active_layer, *s_bt_inactive_layer;
static GBitmap *s_background_bitmap, *s_bt_active_bitmap, *s_bt_inactive_bitmap;
static GFont s_hack_35_font, s_hack_20_font, s_hack_25_font, s_hack_15_font, s_hack_10_font, s_hack_18_font;
static Layer *s_battery_layer;
static int s_battery_level;
static char *s_buffer;

// TODO LIST:
// Battery percentage - done
// Block ending time
//


static void bluetooth_callback(bool connected) {
	// Show icon if disconnected
	layer_set_hidden(bitmap_layer_get_layer(s_bt_inactive_layer), connected);

	// layer_set_hidden(bitmap_layer_get_layer(s_bt_active_layer), connected);
	if(!connected) {
		// Issue a vibrating alert. test if i like it!
		//vibes_double_pulse();
		//vibes_double_pulse();
		//layer_set_hidden(bitmap_layer_get_layer(s_bt_active_layer), connected);
	} else {
		//vibes_double_pulse();
		//vibes_double_pulse();
	}
}

static void battery_callback(BatteryChargeState state) {
	// Record the new battery level
	s_battery_level = state.charge_percent;
	
	// Update meter
	layer_mark_dirty(s_battery_layer);

	// Display Percentage
	static char batbuffer[16];
	snprintf(batbuffer, sizeof(batbuffer), "%d", state.charge_percent);

	static char battery_text[] = "100%";
	snprintf(battery_text, sizeof(battery_text), "%d%%", state.charge_percent);
	text_layer_set_text(s_batterypercent_layer, battery_text); 
}

static void battery_update_proc(Layer *layer, GContext *ctx) {
	GRect bounds = layer_get_bounds(layer);

	// Find the width of the bar
	int width = (int)(float)(((float)s_battery_level / 100.0F) * 60.0F);

	// Draw the background
	#ifdef PBL_COLOR
		graphics_context_set_fill_color(ctx, GColorLightGray);
	#elif PBL_BW
		graphics_context_set_fill_color(ctx, GColorWhite);
	#endif
	graphics_fill_rect(ctx, bounds, GCornerNone, 0);

	// Draw the bar
	// Separate color code for each platform
	#ifdef PBL_COLOR
		graphics_context_set_fill_color(ctx, GColorDarkGray);
	#elif PBL_BW
		graphics_context_set_fill_color(ctx, GColorBlack);
	#endif
	graphics_fill_rect(ctx, GRect(0,0, width, bounds.size.h), GCornerNone, 0);

	
}

static void update_time() {
	// Get a tm structure
	time_t temp = time(NULL);
	struct tm *tick_time = localtime(&temp);

	// Create a long-lived buffer
	static char buffer[] = "00:00";
	
	// Write the current hours and minutes into the buffer
	if(clock_is_24h_style() == true) {
		// Use 24h format
		strftime(buffer, sizeof("00:00"), "%H:%M", tick_time);
	} else {
		// Use 12h format
		strftime(buffer, sizeof("00:00"), "%I:%M", tick_time);
	}

	// Display this time on the TextLayer
	text_layer_set_text(s_time_layer, buffer);

	// Datestuff
	// Copy date into buffer from tm structure
	static char date_buffer[16];
	strftime(date_buffer, sizeof(date_buffer), "%a, %b %d", tick_time);

	// Show the date
	text_layer_set_text(s_date_layer, date_buffer);
}

static void main_window_load(Window *window) {
	// Create GBitmap, then set to created BitmapLayer - Background Layer
	s_background_bitmap = gbitmap_create_with_resource(RESOURCE_ID_IMAGE_BACKGROUND);
	s_background_layer = bitmap_layer_create(GRect(0,0,144,168));
	bitmap_layer_set_bitmap(s_background_layer, s_background_bitmap);
	layer_add_child(window_get_root_layer(window), bitmap_layer_get_layer(s_background_layer));

	// Create the Bluetooth icon GBitmap
	s_bt_active_bitmap = gbitmap_create_with_resource(RESOURCE_ID_IMAGE_BT_ACTIVE_BLACK);
	s_bt_inactive_bitmap = gbitmap_create_with_resource(RESOURCE_ID_IMAGE_BT_INACTIVE_BLACK);

	// Create the BitmapLayer to display the GBitmap - Bluetooth Status Indicator Layer
	s_bt_active_layer = bitmap_layer_create(GRect(85,22,15,15));
	s_bt_inactive_layer = bitmap_layer_create(GRect(85,22,15,15));
	bitmap_layer_set_bitmap(s_bt_active_layer, s_bt_active_bitmap);
	bitmap_layer_set_bitmap(s_bt_inactive_layer, s_bt_inactive_bitmap);
	layer_add_child(window_get_root_layer(window), bitmap_layer_get_layer(s_bt_active_layer));
	layer_add_child(window_get_root_layer(window), bitmap_layer_get_layer(s_bt_inactive_layer));

	// Attempt to set transparency on bluetooth indicator layer
	bitmap_layer_set_compositing_mode(s_bt_active_layer, GCompOpClear);
	bitmap_layer_set_compositing_mode(s_bt_inactive_layer, GCompOpClear);

	// Create time TextLayer
	s_time_layer = text_layer_create(GRect(0, 62, 139, 50));
	text_layer_set_background_color(s_time_layer, GColorClear);
	text_layer_set_text_color(s_time_layer, GColorBlack);
	text_layer_set_text(s_time_layer, "00:00");

	// Create date TextLayer
	s_date_layer = text_layer_create(GRect(0, 120, 144, 30));
	text_layer_set_background_color(s_date_layer, GColorClear);
	text_layer_set_text_color(s_date_layer, GColorBlack);
	text_layer_set_text(s_date_layer, "DatePlaceholder");

	// Create potato text TextLayer
	s_potato_layer = text_layer_create(GRect(0, 140, 144, 30));
	text_layer_set_background_color(s_potato_layer, GColorClear);
	text_layer_set_text_color(s_potato_layer, GColorBlack);
	text_layer_set_text(s_potato_layer, "Potato");
	
	// Create battery text TextLayer
	s_batterytext_layer = text_layer_create(GRect(1, 1, 144, 30));
	text_layer_set_background_color(s_batterytext_layer, GColorClear);
	text_layer_set_text_color(s_batterytext_layer, GColorBlack);
	text_layer_set_text(s_batterytext_layer, "Battery:");
	
	// Create battery percentage TextLayer
	s_batterypercent_layer = text_layer_create(GRect(100,21,60,30));
	text_layer_set_background_color(s_batterypercent_layer, GColorClear);
	text_layer_set_text_color(s_batterypercent_layer, GColorBlack);
	text_layer_set_text(s_batterypercent_layer, "100%"); 
	
	// Create bluetooth text TextLayer
	s_bluetoothtext_layer = text_layer_create(GRect(0, 21, 144, 30));
	text_layer_set_background_color(s_bluetoothtext_layer, GColorClear);
	text_layer_set_text_color(s_bluetoothtext_layer, GColorBlack);
	text_layer_set_text(s_bluetoothtext_layer, "Status:OK");

	// Create Block Schedule text TextLayers
	s_schedule_layer1 = text_layer_create(GRect(0,90,114,30));
	s_schedule_layer2 = text_layer_create(GRect(0,110,114,30));
	text_layer_set_background_color(s_schedule_layer1, GColorClear);
	text_layer_set_background_color(s_schedule_layer2, GColorClear);
	text_layer_set_text_color(s_schedule_layer1, GColorBlack);
	text_layer_set_text_color(s_schedule_layer2, GColorBlack);
	text_layer_set_text(s_schedule_layer1, "Block 1:");	
	text_layer_set_text(s_schedule_layer2, "Ends 9:30 - 0:05 Left");	
	text_layer_set_font(s_schedule_layer1, s_hack_20_font);
	text_layer_set_font(s_schedule_layer2, s_hack_20_font);
	
	// Create battery meter layer			115 2
	s_battery_layer = layer_create(GRect(75,9,60,6));
	layer_set_update_proc(s_battery_layer, battery_update_proc);

	// Create GFont
	s_hack_35_font = fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_HACK_35));
	s_hack_20_font = fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_HACK_20));
	s_hack_25_font = fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_HACK_25));
	s_hack_15_font = fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_HACK_15));
	s_hack_10_font = fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_HACK_10));
	s_hack_18_font = fonts_load_custom_font(resource_get_handle(RESOURCE_ID_FONT_HACK_18));

	// Apply font to TextLayer
	text_layer_set_font(s_time_layer, s_hack_35_font);
	text_layer_set_text_alignment(s_time_layer, GTextAlignmentCenter);

	// Apply font to date TextLayer
	text_layer_set_font(s_date_layer, s_hack_20_font);
	text_layer_set_text_alignment(s_date_layer, GTextAlignmentCenter);

	// Apply font to potato TextLayer
	text_layer_set_font(s_potato_layer, s_hack_25_font);
	text_layer_set_text_alignment(s_potato_layer, GTextAlignmentCenter);
	
	// Apply font to batterytext and batterypercentage TextLayer
	text_layer_set_font(s_batterytext_layer, s_hack_15_font);
	text_layer_set_font(s_batterypercent_layer, s_hack_15_font);
	
	// Apply font to bluetoothtext TextLayer
	text_layer_set_font(s_bluetoothtext_layer, s_hack_15_font);
 
 	// Add it as a child layer to the Window's root layer
 	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_time_layer));
	// Date Layer
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_date_layer));
	// Potato Layer
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_potato_layer));
	// BatteryText and BatteryPercent Layer
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_batterytext_layer));
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_batterypercent_layer));
	// BluetoothText Layer
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_bluetoothtext_layer));
	// Add to Window
	layer_add_child(window_get_root_layer(window), s_battery_layer);




	
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_schedule_layer1));
	layer_add_child(window_get_root_layer(window), text_layer_get_layer(s_schedule_layer2));
	//layer_add_child(window_get_root_layer(window), s_schedule_layer1);
	//layer_add_child(window_get_root_layer(window), s_schedule_layer2);





	// Make sure the time is displayed from the start
	update_time();

	// Ensure battery level is displayed from the start
	battery_callback(battery_state_service_peek());

	// Stuff for the data.txt loading
	Layer *window_layer = window_get_root_layer(window);
	GRect bounds = layer_get_bounds(window_layer);

	s_textfile_layer = text_layer_create(GRect(0, 40, bounds.size.w, 50));
	text_layer_set_overflow_mode(s_textfile_layer, GTextOverflowModeWordWrap);
	text_layer_set_text_alignment(s_textfile_layer, GTextAlignmentCenter);

	// layer_add_child(window_layer, text_layer_get_layer(s_textfile_layer));
	
	// Show the correct state of the BT connection fron the start
	bluetooth_callback(bluetooth_connection_service_peek());
}

static void main_window_unload(Window *window) {
	// Destroy TextLayer
	text_layer_destroy(s_time_layer);
	text_layer_destroy(s_date_layer);
	text_layer_destroy(s_potato_layer);
	text_layer_destroy(s_batterytext_layer);
	text_layer_destroy(s_bluetoothtext_layer);
	text_layer_destroy(s_batterypercent_layer);
	text_layer_destroy(s_schedule_layer1);
	text_layer_destroy(s_schedule_layer2);

	// Unload GFont
	fonts_unload_custom_font(s_hack_35_font);
	fonts_unload_custom_font(s_hack_20_font);
	fonts_unload_custom_font(s_hack_25_font);
	fonts_unload_custom_font(s_hack_15_font);
	fonts_unload_custom_font(s_hack_10_font);
	fonts_unload_custom_font(s_hack_18_font);
	

	// Destroy GBitmap
	gbitmap_destroy(s_background_bitmap);
	
	// Detroy BitmapLayer
	bitmap_layer_destroy(s_background_layer);
	
	// Destroy Battery Layer
	layer_destroy(s_battery_layer);

	// Detroy data.txt layer
	text_layer_destroy(s_textfile_layer);

	// Unload Bluetooth crap
	gbitmap_destroy(s_bt_active_bitmap);
	gbitmap_destroy(s_bt_inactive_bitmap);
	bitmap_layer_destroy(s_bt_active_layer);
	bitmap_layer_destroy(s_bt_inactive_layer);
}

static void tick_handler(struct tm *tick_time, TimeUnits units_changed) {
	update_time();
}
static void load_resource(){
	// Get resource and size
	ResHandle handle = resource_get_handle(RESOURCE_ID_DATA_DATA_TXT);
	size_t res_size = resource_size(handle);

	// Copy to buffer
	s_buffer = (char*)malloc(res_size);
	resource_load(handle, (uint8_t*)s_buffer, res_size);

	//Show in TextLayer
	text_layer_set_text(s_textfile_layer, s_buffer);

}


static void init() {
	// Create main Window element and assign to pointer
	s_main_window = window_create();
	
	// Set handlers to manage the elements inside the Window
	window_set_window_handlers(s_main_window, (WindowHandlers) {
		.load = main_window_load,
		.unload = main_window_unload
	});

	// Show the Window on the watch, with animated=true
	window_stack_push(s_main_window, true);
	
	// Register with TickTimerService
	tick_timer_service_subscribe(MINUTE_UNIT, tick_handler);

	// Register for battery level updates
	battery_state_service_subscribe(battery_callback);

	// Register for Bluetooth connection updates
	bluetooth_connection_service_subscribe(bluetooth_callback);

	load_resource();
}

static void deinit() {
	// Destroy Window
	window_destroy(s_main_window);

	free(s_buffer);
}

int main(void) {
	init();
	app_event_loop();
	deinit();
}
